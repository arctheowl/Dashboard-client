{"ast":null,"code":"import _slicedToArray from \"/home/lidevlin/frontend/dashboard/material-dashboard-react-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nvar api_url = 'localhost:8080'; // App component \n\nfunction ApiCall() {\n  // Initialize state first\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      users = _useState2[0],\n      setUsers = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoaded = _useState4[0],\n      setIsLoaded = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      err = _useState6[0],\n      setErr = _useState6[1];\n\n  useEffect(function () {\n    var getUsers = function getUsers() {\n      fetch(api_url).then(function (res) {\n        // Unfortunately, fetch doesn't send (404 error)\n        // into the cache itself\n        // You have to send it, as I have done below\n        if (res.status >= 400) {\n          throw new Error(\"Server responds with error!\");\n        }\n\n        return res.json();\n      }).then(function (users) {\n        setUsers(users);\n        setIsLoaded(true);\n      }, // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components\n      function (err) {\n        setErr(err);\n        setIsLoaded(true);\n      });\n    };\n\n    getUsers();\n  }, []);\n}","map":{"version":3,"sources":["/home/lidevlin/frontend/dashboard/material-dashboard-react-master/src/variables/apicall.js"],"names":["React","useState","useEffect","api_url","ApiCall","users","setUsers","isLoaded","setIsLoaded","err","setErr","getUsers","fetch","then","res","status","Error","json"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,IAAIC,OAAO,GAAG,gBAAd,C,CACA;;AACA,SAASC,OAAT,GAAmB;AACf;AADe,kBAESH,QAAQ,CAAC,EAAD,CAFjB;AAAA;AAAA,MAEVI,KAFU;AAAA,MAEHC,QAFG;;AAAA,mBAGeL,QAAQ,CAAC,KAAD,CAHvB;AAAA;AAAA,MAGVM,QAHU;AAAA,MAGAC,WAHA;;AAAA,mBAIKP,QAAQ,CAAC,IAAD,CAJb;AAAA;AAAA,MAIVQ,GAJU;AAAA,MAILC,MAJK;;AAKfR,EAAAA,SAAS,CAAC,YAAM;AAChB,QAAMS,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACnBC,MAAAA,KAAK,CAACT,OAAD,CAAL,CACKU,IADL,CACU,UAAAC,GAAG,EAAI;AACT;AACA;AACA;AACA,YAAIA,GAAG,CAACC,MAAJ,IAAc,GAAlB,EAAuB;AACnB,gBAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;AACH;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACH,OATL,EAUKJ,IAVL,CAUU,UAAAR,KAAK,EAAI;AACXC,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACAG,QAAAA,WAAW,CAAC,IAAD,CAAX;AACH,OAbL,EAcI;AACA;AACA;AACI,gBAAAC,GAAG,EAAI;AACHC,QAAAA,MAAM,CAACD,GAAD,CAAN;AACAD,QAAAA,WAAW,CAAC,IAAD,CAAX;AACH,OApBT;AAqBH,KAtBD;;AAuBAG,IAAAA,QAAQ;AACP,GAzBQ,EAyBN,EAzBM,CAAT;AAyBO","sourcesContent":["import React, { useState, useEffect } from 'react';\nlet api_url = 'localhost:8080';\n// App component \nfunction ApiCall() {\n    // Initialize state first\n    let [users, setUsers] = useState([]);\n    let [isLoaded, setIsLoaded] = useState(false);\n    let [err, setErr] = useState(null);\n    useEffect(() => {\n    const getUsers = () => {\n        fetch(api_url)\n            .then(res => {\n                // Unfortunately, fetch doesn't send (404 error)\n                // into the cache itself\n                // You have to send it, as I have done below\n                if (res.status >= 400) {\n                    throw new Error(\"Server responds with error!\")\n                }\n                return res.json()\n            })\n            .then(users => {\n                setUsers(users)\n                setIsLoaded(true)\n            },\n            // Note: it's important to handle errors here\n            // instead of a catch() block so that we don't swallow\n            // exceptions from actual bugs in components\n                err => {\n                    setErr(err)\n                    setIsLoaded(true)\n                })\n    };\n    getUsers()\n    }, [])}"]},"metadata":{},"sourceType":"module"}